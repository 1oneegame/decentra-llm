import argparse
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É XGBoost –∏ LightGBM
try:
    import xgboost
    print("‚úÖ XGBoost –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    print("‚ö†Ô∏è XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")

try:
    import lightgbm 
    print("‚úÖ LightGBM –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    print("‚ö†Ô∏è LightGBM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")

def main():
    parser = argparse.ArgumentParser(description='Decentra ML Push System')
    parser.add_argument('--data-path', default='data/raw/dataset', 
                       help='–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º')
    parser.add_argument('--output', default='data/processed/recommendations.csv',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--train', action='store_true',
                       help='–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å ML –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞—Ç—å CSV')
    
    args = parser.parse_args()
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ ML-Powered Push System...")
    
    if args.train:
        print("üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...")
        from src.ml_push_system import MLPushSystem
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ
        ml_system = MLPushSystem(args.data_path)
        ml_system.load_and_prepare_data()
        training_results = ml_system.train_ml_models()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏
        ml_system.save_ml_models()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        recommendations = []
        for client_code in ml_system.clients_data.keys():
            try:
                result = ml_system.predict_with_ml(client_code)
                ml_pred = result['ml_prediction']
                
                recommendations.append({
                    'client_code': client_code,
                    'product': ml_pred['product'],
                    'confidence': ml_pred.get('confidence', 0.85),
                    'expected_benefit': ml_pred.get('expected_benefit', 25000.0),
                    'cluster_description': f"–ö–ª–∞—Å—Ç–µ—Ä {result.get('cluster', 0)}: {ml_pred.get('cluster_description', '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')}",
                    'push_notification': ml_pred['push_notification']
                })
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_code}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                recommendations.append({
                    'client_code': client_code,
                    'product': '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
                    'confidence': 0.5,
                    'expected_benefit': 15000.0,
                    'cluster_description': '–ö–ª–∞—Å—Ç–µ—Ä 0: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
                    'push_notification': f'–ö–ª–∏–µ–Ω—Ç {client_code}, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!'
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
        import pandas as pd
        df = pd.DataFrame(recommendations)
        os.makedirs(os.path.dirname(args.output), exist_ok=True)
        df.to_csv(args.output, index=False)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {args.output}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(recommendations)}")
        
    else:
        print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã...")
        from src.ml_push_system import demo_ml_system
        demo_ml_system()
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
